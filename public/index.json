[
{
	"uri": "/ssh/",
	"title": "SSH",
	"tags": [],
	"description": "",
	"content": " Secure Shell Mit Hilfe der Secure Shell (SSH) kann mann sich mit der Console des Raspberry Pi verbinden und Linux-Befehle auf dem pi ausführen.\n Konfiguration  Um sich mit dem pi zu verbinden, ohne ein passwort eingeben zu müssen. Muss zunächst eine Verschlüsselung eingerichtet werden. Hierzu gibt es je Verbindung einen öffentlichen und einen privaten schlüssel. Der öffentliche Schlüssel muss auf dem pi hinterlegt werden, wohingegen der private auf dem PC/Gerät verbleibt mit dem die Verbindung zu pi aufgebaut werden soll. Zum generieren der Schlüssel gibt es verschiedene möglichkeiten Schlüssen mit \u0026ldquo;putty\u0026rdquo; erstelen. In der Programmsammlung von putty ist auch ein Key-Generator enthalte \u0026lsquo;puttygen.\n "
},
{
	"uri": "/ssh/configuration/",
	"title": "Konfiguration",
	"tags": [],
	"description": "",
	"content": " Um sich mit dem pi zu verbinden, ohne ein passwort eingeben zu müssen. Muss zunächst eine Verschlüsselung eingerichtet werden. Hierzu gibt es je Verbindung einen öffentlichen und einen privaten schlüssel. Der öffentliche Schlüssel muss auf dem pi hinterlegt werden, wohingegen der private auf dem PC/Gerät verbleibt mit dem die Verbindung zu pi aufgebaut werden soll.\nZum generieren der Schlüssel gibt es verschiedene möglichkeiten\nSchlüssen mit \u0026ldquo;putty\u0026rdquo; erstelen. In der Programmsammlung von putty ist auch ein Key-Generator enthalte \u0026lsquo;puttygen.exe\u0026rsquo;. Mit diesem lässt sich ein öffentlicher (kommte auf den pi) und ein privater (verbleibt auf dem Gerät) erstellt werden.\nöffentlichen Schlüssel auf pi übertragen Zunächst müssen wir und auf dem pi mit dem Benutzer anmelder, unter dem später auch die Verbindung laufen soll. In unserem Fall melden wir auns also unter pi an. Für diesen Benutzer müssen wir zunächst in seinem Homeverzeichniss einen Ordner und eine Datei erstellen.\n$ mkdir ~/.ssh $ touch ~/.ssh/authorized_keys  Jetzt öffnen wir diesen datei nano ~/.ssh/authorized_keys und kopieren den Inhal des public key hinein. Dabei müssen wir darauf achten, dass alles in einer Zeile geschrieben steht.\nFür Olaf mit --text läst sich ein Befehl für copy-und paste freigeben.\n"
},
{
	"uri": "/docker/rpi-hugo/",
	"title": "rpi-hugo",
	"tags": [],
	"description": "hugo docker image für raspberry pi",
	"content": " Docker Image mit Hugo v2.6 für Raspberry pi Unter [DockerHub] finden sich jede Menge gut images für Docker. Darunter finden sich auch einige, die bereits für den Raspberry übersetzt wurden, denn standartmäßig ist alles nur für Linux 64bit systeme gedacht. Die Gruppe hypriot hat schon seit einigen Jahren sich mit dem Thema Docker ung Raspberry auseinander gesetzt. So findet sich unter dockerhub/hypriot einige tolle repos.\nDarunter war auch ein repo für hypriot/rpi-hugo . Doch leider musste ich schnell feststellen, dass es zu alt ist und seit zwei Jaren auf Version 0.14 stehengeblieben ist. Zum Glück ist alles open-Source und so fand sich im Github reousitory alle nötigen dateien um ein neues image mit version v2.6 zu erstellen. Damit auch andere user etwas davon haben, habe ich es unter grembold/rpi-hugo wieder in DockerHub abgelegt.\nHier die wichtigsten befehle für das rpi-hugo repo:\nhugo webseite initialisieren mkdir myblog \u0026amp;\u0026amp; cd myblog docker run -rm -v $(pwd):/www grembold/rpi-hugo new site .  Mit dem ersten Befehl wird ein Verzeichniss erstellt, dindem später alle Dateien für die Webseite gesammelt werden. Mit dem zweiten Befehl wird das docker image ausgeführt und hugo erstellt im aktuellen Verzeichniss alle nöätigen Dateien und Ordner. Der Befehl -rm löscht den container nach dem ausführen gleich wieder. Mit -v $(pwd):/www wird das aktuelle Arbeitsverzeichniss als Volume in den docker container eingehängt. Die kryptische Anweisung $(pwd) ist dabei eine Umgebungsvariable von linux. Mit echo $(pwd) kann man sich den Inhalt anzeigen lassen.\nhugo webseite generieren docker run -rm -v $(pwd):/www grembold/rpi-hugo  Dieser Befehl generiert nun aus den Inhalten unter myblog/content/ die HTML-Seiten und legt alle benötigten daten unter myblog/public ab.\nhugo webseite testen docker run -d -p 1313:1313 -v $(pwd):/www hypriot/rpi-hugo server -b http://\u0026lt;ip-of-your-rpi\u0026gt;/ --bind=0.0.0.0 -w -D  Hiermit lässt sich die Webseite vorher einmal testen. Dabei werden durch die Option -D auch Seiten generiert die noch als Entwurf draft=truegekennzeichnet sind generiert.\n"
},
{
	"uri": "/web/letsencrypt/",
	"title": "Let´s Encrypt",
	"tags": [],
	"description": "Mit Let´s Encrypt ein Zertifikat erstellen",
	"content": " certbot installieren Wie das Docker image isntalleirt wird habe ich bereits [hier]/docker/certbot/ beschrieben. Nun geht es darum ein Zertifikat für die eigene Daomein zu erhalten.\nLet´s Encrypt Zertifikate für nginx installieren Erst wenn Sie sicher sind, dass alles klappt, entfernen Sie zuletzt die Option \u0026ndash;staging und wiederholen das Kommando nochmals zur Installation der endgültigen Zertifikate. Das Abrufen der Zertifikate läuft folgender massen ab: * Der eigene Webserver läuft und ist unter meineDomain:80 erreichbar. * Certbot erstell im www-Verzeichniss des Servers einen versteckten Ordner .well-known und einige Dateien * certbot prüft bei Let´s Encrypt, ob diese Dateien errecihbar sind. * ist dies erfogreich, wird das Zertifikat unter /etc/letsencrypt/meineDomainabgelegt.\nDamit dies nun über das Docker Image funktioniert, müssen wir diesem zwei Verzeichnisse mitgeben. Das erste ist das www-Verzeichniss vom Webserver und das zweite ein verzeichniss, indem der certbot die erstellten Zertifikate ablegen kann.\ndocker run --rm -v $CERTS_DIR:/etc/letsencrypt -p 80:80 --name certbot napnap75/rpi-certbot:latest certbot certonly --standalone --standalone-supported-challenges http-01 -t -n --agree-tos -m $EMAIL -d $HOST  Startet den certbot im \u0026ldquo;interaktiven\u0026rdquo; modus docker run -it \u0026ndash;rm \\ -v /home/pi/myHugoLP/public:/var/www/ -v /home/pi/nginx-proxy/certs:/etc/letsencrypt \u0026ndash;name certbot bcecchinato/certbot-rpi certonly \u0026ndash;webroot -w /var/www/ -d meineDomain.de -d www.meineDomain.de\nSaving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator webroot, Installer None Enter email address (used for urgent renewal and security notices) (Enter \u0026lsquo;c\u0026rsquo; to cancel):\nPlease read the Terms of Service at https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree in order to register with the ACME server at\nhttps://acme-v01.api.letsencrypt.org/directory (A)gree/\u0026copy;ancel: A\nWould you be willing to share your email address with the Electronic Frontier Foundation, a founding partner of the Let\u0026rsquo;s Encrypt project and the non-profit organization that develops Certbot? We\u0026rsquo;d like to send you email about EFF and\nour work to encrypt the web, protect its users and defend digital rights. (Y)es/(N)o: N Obtaining a new certificate Performing the following challenges: http-01 challenge for meineDomain.de Using the webroot path /var/www for all unmatched domains. Waiting for verification\u0026hellip; Cleaning up challenges\nIMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/meineDomain.de/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/meineDomain.de/privkey.pem Your cert will expire on 2017-12-01. To obtain a new or tweaked version of this certificate in the future, simply run certbot again. To non-interactively renew all of your certificates, run \u0026ldquo;certbot renew\u0026rdquo; - Your account credentials have been saved in your Certbot configuration directory at /etc/letsencrypt. You should make a secure backup of this folder now. This configuration directory will also contain certificates and private keys obtained by Certbot so making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by:\nDonating to ISRG / Let\u0026rsquo;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le\nZertifikat und Konfiguration testen HTTPS-Konfiguration noch über die Seite https://www.ssllabs.com prüfen lassen.\nZertifikate automatisch erneuern lassen \u0026ldquo;Volumes\u0026rdquo;: { \u0026ldquo;/etc/letsencrypt\u0026rdquo;: {}, \u0026ldquo;/sys/fs/cgroup\u0026rdquo;: {}, \u0026ldquo;/var/lib/letsencrypt\u0026rdquo;: {}\nQuellen  https://letsencrypt.org/ https://certbot.eff.org/docs https://certbot.eff.org/#debianjessie-nginx https://kofler.info/lets-encrypt-zertifikate-fuer-web-und-mail-unter-ubuntu-16-04/ https://blog.doenselmann.com/nginx-und-lets-encrypt-auf-raspberry-pi/  "
},
{
	"uri": "/docker/certbot/",
	"title": "certbot-rpi",
	"tags": [],
	"description": "Raspberry Pi compatible Docker base image with Let´s Encrypt",
	"content": " Um sein aktuelles SSL-Zertifikat für meine Webseite zu erhalten, ist es am einfachsten auf ein vorhandenes Docker Image zurückzugreifen.\nWas ist Let´s Encrypt? Let´s Encrypt ist eine Zertifizierungsstelle die die erstellung von kostenlosen TLS-Zertifikaten anbietet. Ziel des Projektes ist es, jeden Internetdienst eine einfache Verschlüsselung anbieten kann. Dabei ist der Prozess zur erstellung des Zertifikats über den so genannten certbot automatisiert.\ncertbot-rpi on DockerHub certbot-rpi on GitHub\nHier eine kurze anleitung, wie das Docker Image verwendet wird.\nPull des Image docker pull pull bcecchinato/certbot-rpi  Aktuelle Version von Let´s Encrypt certbot abrufen docker run -it --rm bcecchinato/certbot-rpi --help  "
},
{
	"uri": "/web/",
	"title": "web",
	"tags": [],
	"description": "",
	"content": "A bunch of Shortcodes are available with this theme :\nMonitoren wie lange der eingene Server verfügbar war Beispiel trashserver.net UpTimeRobot\nWeb Server Survey\n(FreeFileSync)[https://www.freefilesync.org/] solte ich mir mal ansehen, um die Daten mit der NAS bazugleichen.\nSo, damit ich das nicht immer wieder vergesse. Im Repository dieser webseite sind die Themes als git submoldule eingebunden. Damit die aktuallisiert werden , muss folgenden ausgeführt werden\ngit submodule foreach git pull  Will man ein neues theme hinzufügen, som muss man mit $ git submodule add https://github.com/sethmacleod/docdock.git themes/docock in das eigene repository laden und anschließend in die initgit.sh integrieren $ git submodule init $ git submodule update\n Let´s Encrypt  Mit Let´s Encrypt ein Zertifikat erstellen\n "
},
{
	"uri": "/docker/",
	"title": "docker",
	"tags": [],
	"description": "",
	"content": " Docker Also auf dem Raspberry Pi lässt sich zum Glück inzwischen auch docker und auch swarm ausführen.\nDabei ist zu beachten dass die images aus  DockerHub Auf dieser Seite möchte ich Anleitungen für verschiedene Bastelprojekte von mir dokumentieren.\n"
},
{
	"uri": "/",
	"title": "DocDock für Blume",
	"tags": [],
	"description": "",
	"content": " Olafs Dokumentation für PC und Bastelprojekte Auf dieser Seite möchte ich Anleitungen für verschiedene Bastelprojekte von mir dokumentieren.\nVileicht nutze ich einen Teil als block, um den zeitlichen Fortschritt zu dokumentieren und später daraus Tutorials oder Anleitungen zu erstellen.\nDokumentations Webseite Diese Dokumentation ist eine mit hugo statisch generierte Webseite: mit dem Einfachen Befehl hugo\nAutomated deployments Automatically published and hosted thanks to Netlify.\nRead more about Automated HUGO deployments with Netlify\n Netlify builds, deploys, and hosts frontends.  "
},
{
	"uri": "/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Blume Dokumentation\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/impressum/",
	"title": "Impressum",
	"tags": [],
	"description": "Verantwortlich für dieses Angebot gemäß § 5 TMG / § 55 RStV",
	"content": " Impressum Verantwortlich für dieses Angebot gemäß § 5 TMG / § 55 RStV: Olaf Blume Franz-Schubert-Str. 2\n21365 Adendorf\nemail: olaf-petersen@qmx.de\nHaftung für Links Unser Angebot enth\u0026auml;lt Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb k\u0026ouml;nnen wir f\u0026uuml;r diese fremden Inhalte auch keine Gew\u0026auml;hr \u0026uuml;bernehmen. F\u0026uuml;r die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf m\u0026ouml;gliche Rechtsverst\u0026ouml;\u0026szlig;e \u0026uuml;berpr\u0026uuml;ft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar.\nEine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.\n"
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]